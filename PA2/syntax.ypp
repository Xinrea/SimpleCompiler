%{
    #include <string>
    #include <iostream>
    #include <cstdio>
    #include "node.h"
    NBlock *topBlock;
    extern FILE *yyin;
    extern int yylineno;
    extern char *yytext;
    extern int yylex();
    void yyerror(const char* s);
%}
%union {
    Node *node;
    NBlock *block;
    NExpression *expr;
    NStatement *stmt;
    NIdentifier *ident;
    NVariableDeclaration *var_decl;
    std::vector<NVariableDeclaration*> *varvec;
    std::vector<NExpression*> *exprvec;
    std::string *string;
    int token;
}
%token <string> CHAR IDENT
%token <string> INT BOOL
%token <string> FLOAT
%token <token> LB RB LP RP COM AS AAS SAS MAS DAS SEM SRET IF ELSE WHILE G S GE SE NE EQ AND OR

%type <ident> ident
%type <expr> exp term
%type <varvec> paras
%type <exprvec> calls
%type <block> s stats block
%type <stmt> stat vardecl fundecl ifstat whilestat
%type <token> operation selfop asop



%left ADD SUB
%left MUL DIV TADD TSUB
%%
s : stats {topBlock=$1;}
    ;
stats : stat {$$=new NBlock();$$->statements.push_back($<stmt>1);}
    |stats stat {$1->statements.push_back($<stmt>2);}
    ;
stat : vardecl {$$=$1;}
    |fundecl {$$=$1;}
    |ifstat {$$=$1;}
    |whilestat {$$=$1;}
    |exp {$$=new NExpressionStatement(*$1);}
    ;
block : LB stats RB {$$=$2;}
    |LB RB {$$=new NBlock();}
    ;
vardecl : ident ident AS exp {$$=new NVariableDeclaration(*$1,*$2,$4);}
    |ident ident {$$=new NVariableDeclaration(*$1,*$2);}
    ;
fundecl : ident ident LP paras RP block {$$=new NFunctionDeclaration(*$1,*$2,*$4,*$6);delete $4;}
    ;
ifstat : IF LP exp RP block ELSE block {$$=new NIfstatement(*$3,*$5,*$7);}
    |IF LP exp RP block {$$=new NIfstatement(*$3,*$5,*(new NBlock()));}
    ;
whilestat : WHILE LP exp RP block {$$=new NWhilestatement(*$3,*$5);}
    ;
paras : {$$=new VariableList();}
    |vardecl {$$=new VariableList();$$->push_back($<var_decl>1);}
    |paras COM vardecl {$$->push_back($<var_decl>3);}
    ;
ident : IDENT {$$=new NIdentifier(*$1);delete $1;}
    ;
exp : ident asop exp {$$=new NAssignment($2,*$<ident>1,*$3);}
    |ident LP calls RP {$$=new NMethodCall(*$1,*$3);delete $3;}
    |ident {$<ident>$=$1;}
    |term
    |exp operation exp {$$=new NBinaryOperator(*$1,$2,*$3);}
    |selfop ident {$$=new NSelfLOperator($1,*$<ident>2);}
    |ident selfop {$$=new NSelfROperator(*$<ident>1,$2);}
    |LP exp RP {$$=$2;}
    ;
calls : {$$=new ExpressionList();}
    |exp {$$=new ExpressionList();$$->push_back($1);}
    |calls COM exp {$1->push_back($3);}
    ;
term : INT {$$=new NInteger(atoi($1->c_str()));}
    |FLOAT {$$=new NDouble(atof($1->c_str()));}
    |BOOL {$$=new NInteger((*$1)[0]=='t'?1:0);}
    |CHAR {$$=new NInteger((*$1)[0]);}
    ;
operation : ADD | SUB | MUL | DIV | G | S | GE | SE | NE | EQ | AND | OR
    ;
selfop : TADD | TSUB
    ;
asop : AS | AAS | SAS | MAS | DAS
    ;
%%

int main(int argc, char** argv){
	yyin = fopen(argv[1],"r");
	if(!yyin)return 0;
	yyparse();
    topBlock->printNode(0);
	return 0;
}

void yyerror(const char* s){
    printf("%s at line %d: %s\n",s,yylineno,yytext);
}